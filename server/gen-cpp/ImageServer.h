/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ImageServer_H
#define ImageServer_H

#include <thrift/TDispatchProcessor.h>
#include "ImageServer_types.h"



class ImageServerIf {
 public:
  virtual ~ImageServerIf() {}
  virtual void query(std::vector<std::string> & _return, const std::string& filename) = 0;
  virtual void reload_func(const std::string& func_name) = 0;
  virtual void query_result(std::vector<Pair> & _return, const std::string& filename) = 0;
};

class ImageServerIfFactory {
 public:
  typedef ImageServerIf Handler;

  virtual ~ImageServerIfFactory() {}

  virtual ImageServerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ImageServerIf* /* handler */) = 0;
};

class ImageServerIfSingletonFactory : virtual public ImageServerIfFactory {
 public:
  ImageServerIfSingletonFactory(const boost::shared_ptr<ImageServerIf>& iface) : iface_(iface) {}
  virtual ~ImageServerIfSingletonFactory() {}

  virtual ImageServerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ImageServerIf* /* handler */) {}

 protected:
  boost::shared_ptr<ImageServerIf> iface_;
};

class ImageServerNull : virtual public ImageServerIf {
 public:
  virtual ~ImageServerNull() {}
  void query(std::vector<std::string> & /* _return */, const std::string& /* filename */) {
    return;
  }
  void reload_func(const std::string& /* func_name */) {
    return;
  }
  void query_result(std::vector<Pair> & /* _return */, const std::string& /* filename */) {
    return;
  }
};

typedef struct _ImageServer_query_args__isset {
  _ImageServer_query_args__isset() : filename(false) {}
  bool filename;
} _ImageServer_query_args__isset;

class ImageServer_query_args {
 public:

  ImageServer_query_args() : filename() {
  }

  virtual ~ImageServer_query_args() throw() {}

  std::string filename;

  _ImageServer_query_args__isset __isset;

  void __set_filename(const std::string& val) {
    filename = val;
  }

  bool operator == (const ImageServer_query_args & rhs) const
  {
    if (!(filename == rhs.filename))
      return false;
    return true;
  }
  bool operator != (const ImageServer_query_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImageServer_query_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ImageServer_query_pargs {
 public:


  virtual ~ImageServer_query_pargs() throw() {}

  const std::string* filename;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ImageServer_query_result__isset {
  _ImageServer_query_result__isset() : success(false) {}
  bool success;
} _ImageServer_query_result__isset;

class ImageServer_query_result {
 public:

  ImageServer_query_result() {
  }

  virtual ~ImageServer_query_result() throw() {}

  std::vector<std::string>  success;

  _ImageServer_query_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const ImageServer_query_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ImageServer_query_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImageServer_query_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ImageServer_query_presult__isset {
  _ImageServer_query_presult__isset() : success(false) {}
  bool success;
} _ImageServer_query_presult__isset;

class ImageServer_query_presult {
 public:


  virtual ~ImageServer_query_presult() throw() {}

  std::vector<std::string> * success;

  _ImageServer_query_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ImageServer_reload_func_args__isset {
  _ImageServer_reload_func_args__isset() : func_name(false) {}
  bool func_name;
} _ImageServer_reload_func_args__isset;

class ImageServer_reload_func_args {
 public:

  ImageServer_reload_func_args() : func_name() {
  }

  virtual ~ImageServer_reload_func_args() throw() {}

  std::string func_name;

  _ImageServer_reload_func_args__isset __isset;

  void __set_func_name(const std::string& val) {
    func_name = val;
  }

  bool operator == (const ImageServer_reload_func_args & rhs) const
  {
    if (!(func_name == rhs.func_name))
      return false;
    return true;
  }
  bool operator != (const ImageServer_reload_func_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImageServer_reload_func_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ImageServer_reload_func_pargs {
 public:


  virtual ~ImageServer_reload_func_pargs() throw() {}

  const std::string* func_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ImageServer_reload_func_result {
 public:

  ImageServer_reload_func_result() {
  }

  virtual ~ImageServer_reload_func_result() throw() {}


  bool operator == (const ImageServer_reload_func_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ImageServer_reload_func_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImageServer_reload_func_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ImageServer_reload_func_presult {
 public:


  virtual ~ImageServer_reload_func_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ImageServer_query_result_args__isset {
  _ImageServer_query_result_args__isset() : filename(false) {}
  bool filename;
} _ImageServer_query_result_args__isset;

class ImageServer_query_result_args {
 public:

  ImageServer_query_result_args() : filename() {
  }

  virtual ~ImageServer_query_result_args() throw() {}

  std::string filename;

  _ImageServer_query_result_args__isset __isset;

  void __set_filename(const std::string& val) {
    filename = val;
  }

  bool operator == (const ImageServer_query_result_args & rhs) const
  {
    if (!(filename == rhs.filename))
      return false;
    return true;
  }
  bool operator != (const ImageServer_query_result_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImageServer_query_result_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ImageServer_query_result_pargs {
 public:


  virtual ~ImageServer_query_result_pargs() throw() {}

  const std::string* filename;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ImageServer_query_result_result__isset {
  _ImageServer_query_result_result__isset() : success(false) {}
  bool success;
} _ImageServer_query_result_result__isset;

class ImageServer_query_result_result {
 public:

  ImageServer_query_result_result() {
  }

  virtual ~ImageServer_query_result_result() throw() {}

  std::vector<Pair>  success;

  _ImageServer_query_result_result__isset __isset;

  void __set_success(const std::vector<Pair> & val) {
    success = val;
  }

  bool operator == (const ImageServer_query_result_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ImageServer_query_result_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImageServer_query_result_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ImageServer_query_result_presult__isset {
  _ImageServer_query_result_presult__isset() : success(false) {}
  bool success;
} _ImageServer_query_result_presult__isset;

class ImageServer_query_result_presult {
 public:


  virtual ~ImageServer_query_result_presult() throw() {}

  std::vector<Pair> * success;

  _ImageServer_query_result_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ImageServerClient : virtual public ImageServerIf {
 public:
  ImageServerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ImageServerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void query(std::vector<std::string> & _return, const std::string& filename);
  void send_query(const std::string& filename);
  void recv_query(std::vector<std::string> & _return);
  void reload_func(const std::string& func_name);
  void send_reload_func(const std::string& func_name);
  void recv_reload_func();
  void query_result(std::vector<Pair> & _return, const std::string& filename);
  void send_query_result(const std::string& filename);
  void recv_query_result(std::vector<Pair> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ImageServerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ImageServerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ImageServerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_query(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reload_func(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query_result(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ImageServerProcessor(boost::shared_ptr<ImageServerIf> iface) :
    iface_(iface) {
    processMap_["query"] = &ImageServerProcessor::process_query;
    processMap_["reload_func"] = &ImageServerProcessor::process_reload_func;
    processMap_["query_result"] = &ImageServerProcessor::process_query_result;
  }

  virtual ~ImageServerProcessor() {}
};

class ImageServerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ImageServerProcessorFactory(const ::boost::shared_ptr< ImageServerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ImageServerIfFactory > handlerFactory_;
};

class ImageServerMultiface : virtual public ImageServerIf {
 public:
  ImageServerMultiface(std::vector<boost::shared_ptr<ImageServerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ImageServerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ImageServerIf> > ifaces_;
  ImageServerMultiface() {}
  void add(boost::shared_ptr<ImageServerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void query(std::vector<std::string> & _return, const std::string& filename) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query(_return, filename);
    }
    ifaces_[i]->query(_return, filename);
    return;
  }

  void reload_func(const std::string& func_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reload_func(func_name);
    }
    ifaces_[i]->reload_func(func_name);
  }

  void query_result(std::vector<Pair> & _return, const std::string& filename) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query_result(_return, filename);
    }
    ifaces_[i]->query_result(_return, filename);
    return;
  }

};



#endif
